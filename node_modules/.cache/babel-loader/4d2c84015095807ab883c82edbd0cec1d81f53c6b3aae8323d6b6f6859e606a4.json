{"ast":null,"code":"var _jsxFileName = \"/home/user/Development/code/phase4/phase-4-final-project/phase-4-final-project/src/Recipe/MyRecipes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport Category from '../components/Category';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewRecipes() {\n  _s();\n  const [recipess, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [categories, setCategories] = useState([]);\n  const userId = sessionStorage.getItem('userId');\n  useEffect(() => {\n    fetch('/me').then(response => response.json()).then(data => {\n      console.log(data.recipes);\n      if (data && data.recipes) {\n        // add null check here\n        // Filter the recipes to show only those created by the logged-in user\n        const userId = data.id;\n        const filtered = data.recipes.filter(recipe => recipe.user_id === userId);\n        // console.log(filteredRecipes)\n        setRecipes(filtered);\n        console.log(data.recipes);\n      }\n      // const userId = data.data.id;\n      // const filteredRecipes = data.recipes.filter(recipe => recipe.user_id === userId);\n      // setRecipes(filteredRecipes);\n    });\n    //   if (data && data.data && Array.isArray(data.data)) {\n    //     // Filter the recipes to show only those created by the logged-in user\n    //     const filteredRecipes = data.data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n    //     setRecipes(filteredRecipes);\n    //   } else {\n    //     // Handle errors\n    //     console.error('Error: Invalid response format');\n    //   }\n    // })\n    // .catch(error => {\n    //   console.error('Error fetching recipes:', error);\n    // });\n    //   .then(response => response.json())\n    //   .then(data => {\n    //     // Filter the recipes to show only those created by the logged-in user\n    //     const filteredRecipes = data.data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n    //     setRecipes(filteredRecipes);\n    //   });\n    // const fetchRecipes = async () => {\n    //   try {\n    //     const response = await fetch('/me');\n    //     let data = await response.json();\n    //     // console.log(recipes);\n    //     setRecipes(data.data);\n    //     console.log(recipes);\n    //     setIsLoading(false)\n    //   } catch (error) {\n    //     console.log(error);\n    //     setIsLoading(false)\n    //   }\n    // };\n\n    fetch('/categories').then(response => response.json()).then(data => setCategories(data.data));\n    // fetchRecipes();\n  }, []);\n\n  //   useEffect(() => {\n  //     // Fetch recipes from the backend API\n  //     fetch('/recipes')\n  //       .then(response => response.json())\n  //       .then(data => {\n  //         // Filter the recipes to show only those created by the logged-in user\n  //         const filteredRecipes = data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n  //         setRecipes(filteredRecipes);\n  //       });\n  //       fetch('/categories')\n  //       .then(response => response.json())\n  //       .then(data => setCategories(data.data));\n  //       fetchRecipes();\n  //     }, []);\n  //   }, []);\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    striped: true,\n    bordered: true,\n    hover: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"#\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Ingredients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Prep Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Actions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: Array.isArray(recipes) && recipes.map((recipe, index) => {\n        console.log(recipe, index);\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: recipe.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: recipe.instructions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: recipe.ingredients\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: recipe.prep_time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Category, {\n            category: categories.find(category => category.id === recipes.category_id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this)]\n        }, recipe.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 19\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewRecipes, \"nlgBJRbwwn7VZlVVwRhL9mBBpeY=\");\n_c = ViewRecipes;\nexport default ViewRecipes;\nvar _c;\n$RefreshReg$(_c, \"ViewRecipes\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","Category","jsxDEV","_jsxDEV","ViewRecipes","_s","recipess","setRecipes","isLoading","setIsLoading","categories","setCategories","userId","sessionStorage","getItem","fetch","then","response","json","data","console","log","recipes","id","filtered","filter","recipe","user_id","striped","bordered","hover","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","map","index","title","instructions","ingredients","prep_time","category","find","category_id","_c","$RefreshReg$"],"sources":["/home/user/Development/code/phase4/phase-4-final-project/phase-4-final-project/src/Recipe/MyRecipes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Table, Button } from 'react-bootstrap';\nimport Category from '../components/Category';\nfunction ViewRecipes() {\n  const [recipess, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [categories, setCategories] = useState([]);\n\n  const userId = sessionStorage.getItem('userId');\n\n  useEffect(() => {\n    fetch('/me')\n\n    .then(response => response.json())\n    .then(data => {\n        console.log(data.recipes)\n        if (data && data.recipes) { // add null check here\n            // Filter the recipes to show only those created by the logged-in user\n            const userId = data.id;\n            const filtered = data.recipes.filter(recipe => recipe.user_id === userId);\n            // console.log(filteredRecipes)\n            setRecipes(filtered);\n            console.log(data.recipes)\n            \n          }\n        // const userId = data.data.id;\n        // const filteredRecipes = data.recipes.filter(recipe => recipe.user_id === userId);\n        // setRecipes(filteredRecipes);\n    })\n    //   if (data && data.data && Array.isArray(data.data)) {\n    //     // Filter the recipes to show only those created by the logged-in user\n    //     const filteredRecipes = data.data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n    //     setRecipes(filteredRecipes);\n    //   } else {\n    //     // Handle errors\n    //     console.error('Error: Invalid response format');\n    //   }\n    // })\n    // .catch(error => {\n    //   console.error('Error fetching recipes:', error);\n    // });\n        //   .then(response => response.json())\n        //   .then(data => {\n        //     // Filter the recipes to show only those created by the logged-in user\n        //     const filteredRecipes = data.data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n        //     setRecipes(filteredRecipes);\n        //   });\n    // const fetchRecipes = async () => {\n    //   try {\n    //     const response = await fetch('/me');\n    //     let data = await response.json();\n    //     // console.log(recipes);\n    //     setRecipes(data.data);\n    //     console.log(recipes);\n    //     setIsLoading(false)\n    //   } catch (error) {\n    //     console.log(error);\n    //     setIsLoading(false)\n    //   }\n    // };\n\n    fetch('/categories')\n    .then(response => response.json())\n    .then(data => setCategories(data.data));\n    // fetchRecipes();\n  }, []);\n\n\n\n//   useEffect(() => {\n//     // Fetch recipes from the backend API\n//     fetch('/recipes')\n//       .then(response => response.json())\n//       .then(data => {\n//         // Filter the recipes to show only those created by the logged-in user\n//         const filteredRecipes = data.filter(recipe => recipe.user_id === sessionStorage.getItem('userId'));\n//         setRecipes(filteredRecipes);\n//       });\n//       fetch('/categories')\n//       .then(response => response.json())\n//       .then(data => setCategories(data.data));\n//       fetchRecipes();\n//     }, []);\n//   }, []);\n \n  return (\n    <Table striped bordered hover>\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Title</th>\n        <th>Instructions</th>\n        <th>Ingredients</th>\n        <th>Prep Time</th>\n        <th>Category</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {\n      Array.isArray(recipes) && recipes.map((recipe, index) => {\n        console.log(recipe, index);\n        return (\n                  <tr key={recipe.id}>\n                  <td>{index + 1}</td>\n                  <td>{recipe.title}</td>\n                  <td>{recipe.instructions}</td>\n                  <td>{recipe.ingredients}</td>\n                  <td>{recipe.prep_time}</td>\n                  <Category category={categories.find(category => category.id === recipes.category_id)} />\n\n               \n                  </tr>\n                            )\n                          }\n                          \n                            \n                        \n                          )}\n      \n    </tbody>\n  </Table>\n  )\n}\nexport default ViewRecipes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}